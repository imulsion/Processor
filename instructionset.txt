#####INSTRUCTION SET FOR PROCESSOR#####

	INSTRUCTION SET (6 bits per instruction)
	
	000000 - MOV R1,R2 //Copy R2 to R1 
	000001 - MOVI R1,x //x->R1 
	000010 - AND R1,R2 //R1=R1.R2 
	000011 - OR R1,R2 //R1 = OR(R1,R2) 
	000100 - NOT R1 //R1=~R1 
	000101 - RET //return from procedure 
	000110 - ADD R1,R2 //R1=R1+R2 signed, no carry 
	000111 - ADDI R1,x //R1=R1+x signed 
	001000 - SUB R1,R2 //R1=R1-R2 signed 
	001001 - SUBI R1,x //R1=R1-x signed 
	001010 - MUL R1,R2 //R1HL=R1*R2 unsigned - 16 bit result placed in R1(lower) and R1+1(higher) 
	001011 - DIV R1,R2 //R1 = floor(R1/R2) unsigned 
	001100 - JMP label //jump to label 
	001101 - CP R1,R2 //compare R1 to R2, unset zero flag if equal, set otherwise, set sign flag if R2<R1 signed 
	001110 - CPI R1,x //compare R1 to x, unset zero if equal, set otherwise, set sign flag if x<R1 (signed)
	001111 - LOAD R1,ADD1 //load contents of RAM address ADD1 to R1 
	010000 - STORE ADD1,R1 //store contents of R1 at RAM address ADD1 
	010001 - BNE label //branch if zero flag set 
	010010 - BREQ label //branch if zero flag not set 
	010011 - BRSN label //branch if sign flag not set
	010100 - BRSS label //branch if sign flag set
	010101 - INC R1 //increment value in R1 
	010110 - DEC R1 //decrement value in R1 
	010111 - ADDL R1HL,R2HL //R1HL = R1HL+R2HL  (16 bits) 
	011000 - SUBL R1HL,R2HL //R1HL = R1HL-R2HL (16 bits) 
	011001 - MOD R1,R2 //R1 = R1%R2 
	011010 - PRNT R1,x //prints the value stored in R1 to the screen. If x=0 print in base 2, if x=1 print in base 10 (8 bit), if x=2 print in base 10 (16 bit), if x=3 R1 becomes an immediate value 
	011011 - STRG R1HL,R2 //Store byte stored in R2 at RAM address specified in R1(lower) and R1+1 (higher) 
	011100 - ADCL R1HL,R2HL //R1=R1+R2 (16 bits) with carry 
	011101 - ASR R1,x //arithmetic right shift R1<-R1 x times 
	011110 - ASL R1,x //arithmetic left shift R1<-R1 x times 
	011111 - LDRG R1,R2HL //Load byte stored at address R2HL in R1 
	100000 - SBRS R1,x//Skip next instruction if bit x in R1 is set (MSB = bit 0) 
	100001 - SBRN R1,x//Skip next instruction if bit x in R1 is reset 
	100010 - CALL label//Call procedure at label
	
	#######################################################################################
	
	PROCESSOR COMMAND LINE PARAMETERS:
	main <filename> -debug <registers> <max_cycles>
	
	#Filename: Name of .sbf program to run
	#-debug: enable debug mode (optional)
	#registers: Used when debug mode active (mandatory). Specifies which registers will be logged, e.g. 0,3,4-6,8-10 will log R0,R3,R4,R5,R6,R8,R9 and R10
	#max_cycles: Used when debug mode active (optional). Specifies how many program cycles to log in order to limit log file size. Large programs will create enormous log files if all cycles are logged, so use max_cycles to limit log size.

	EXAMPLES:
	
	main myprog.sbf
	main myprog.sbf -debug 0-4,6,9 1000
	main myprog.sbf -debug 0-3,5,6
	main myprog.sbf -debug 0-1,4-6,7-9,13 100
	main myprog.sbf -debug 0-31
	
	#######################################################################################
	
	Example usage: Print all the square numbers up to 99^2
	
	MOVI R0,0 ; count variable

	loop:
	MOV R1,R0
	MUL R1,R1
	PRNT R1,2
	INC R0
	CPI R0,100
	BNE loop
	RET